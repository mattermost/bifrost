version: 2.1
executors:
  default:
    docker:
    - image: circleci/golang:1.15.7

aliases:
- &restore_cache
  restore_cache:
    key: go-mod-v1-{{ checksum "go.sum" }}
- &save_cache
  save_cache:
    key: go-mod-v1-{{ checksum "go.sum" }}
    paths:
    - "/go/pkg/mod"

commands:
  install-golangci-lint:
    description: Install golangci-lint
    parameters:
      version:
        type: string
        default: 1.31.0
      gobin:
        type: string
        default: /go/bin
      prefix:
        type: string
        default: v1
        description: Prefix for cache key to store the binary.
    steps:
      - restore_cache:
          name: Restore golangci-lint cache
          keys: ['<< parameters.prefix >>-golangci-lint-{{ arch }}-<< parameters.version >>']
      - run:
          name: Install golangci-lint
          command: |
            mkdir -p << parameters.gobin >>
            command -v << parameters.gobin >>/golangci-lint && exit
            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download | sh -s -- -b << parameters.gobin >>/ v<< parameters.version >>
      - save_cache:
          name: Save golangci-lint cache
          key: '<< parameters.prefix >>-golangci-lint-{{ arch }}-<< parameters.version >>'
          paths: [<< parameters.gobin >>/golangci-lint]

jobs:
  test:
    docker:
      - image: circleci/golang:1.15.1
    steps:
      - checkout
      - install-golangci-lint
      - *restore_cache
      - run: make verify-gomod
      - run: make check-style
      - run: make test
      - *save_cache

  push-docker-pr:
    executor:
      name: default
    steps:
    - checkout
    - setup_remote_docker
    - run: make build-image
    - run: ./scripts/push-docker-pr.sh
    - run:
        name: Re-run Docker Push if fail
        command: |
            sleep 20
            ./scripts/push-docker-pr.sh
        when: on_fail

  push-docker:
    executor:
      name: default
    steps:
    - checkout
    - setup_remote_docker
    - run: make build-image
    - run: ./scripts/push-docker.sh
    - run:
        name: Re-run Docker Push if fail
        command: |
            sleep 20
            ./scripts/push-docker.sh
        when: on_fail

  scan-image:
    docker:
    - image: registry.gitlab.com/gitlab-org/security-products/analyzers/klar:latest
      environment:
        GIT_STRATEGY: none
        CI_APPLICATION_REPOSITORY: mattermost/bifrost
        CLAIR_DB_CONNECTION_STRING: "postgresql://postgres:password@localhost:5432/postgres?sslmode=disable&statement_timeout=60000"
        DOCKERFILE_PATH: "build/Dockerfile"
    - image: arminc/clair-db:latest
    steps:
    - checkout
    - run: |
        export CI_APPLICATION_TAG="${CIRCLE_SHA1:0:7}"
        export DOCKER_USER=$DOCKER_USERNAME
        /analyzer run
    - store_artifacts:
        path: gl-container-scanning-report.json
        destination: security-scan

workflows:
  version: 2
  ci-build:
    jobs:
    - test
    - push-docker-pr:
        context: matterbuild-docker
        requires:
        - test
    - scan-image:
        context: matterbuild-docker
        requires:
        - push-docker-pr
  master-build:
    jobs:
    - test:
        filters:
          branches:
            only:
            - master
    - push-docker:
          context: matterbuild-docker
          requires:
          - test
          filters:
            branches:
              only:
              - master
  tag-builds:
    jobs:
    - test:
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
    - push-docker:
        context: matterbuild-docker
        requires:
        - test
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
